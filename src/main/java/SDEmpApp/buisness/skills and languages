if (finalQuery.getSkillDTOs() != null) {
            List<String> skills = finalQuery.getSkillDTOs().getSkills().stream()
                    .map(SkillDTO::getSkill)
                    .map(Skill::name)
                    .sorted()
                    .toList();

            if (finalQuery.getIsSpecifiedSkills()) {
                jobAdvertisementList.addAll(findOnlyBySpecifiedSkills(finalQuery.getSkillDTOs()));
                List<JobAdvertisement> list = skills.stream()
                        .map(jobAdvertisementDAO::findBySkill)
                        .flatMap(List::stream)
                        .distinct()
                        .toList();

                // Criteria API JPA
                Path<Object> skillsNeeded = root.get("skillsNeeded");
                String string = skillsNeeded.toString();
                String alias = skillsNeeded.getAlias();
                predicate = criteriaBuilder.and(predicate, skillsNeeded.in(skills));
            } else {
                jobAdvertisementList.addAll(findBySkills(finalQuery.getSkillDTOs()));

                // Criteria API JPA
                for (String skill : skills) {
                    predicate = criteriaBuilder.and(predicate, criteriaBuilder.like(
                            root.get("skillsNeeded"), skill));
                }
//                Stream<String> skillsNeeded = skills.stream()
//                        .peek(skill -> criteriaQuery.select(root).where(criteriaBuilder.like(
//                                root.get("skillsNeeded"), skill)
//                        ));
            }
        }

        if (finalQuery.getLanguageDTOs() != null) {
            List<String> languages = finalQuery.getLanguageDTOs().getLanguageDTOs().stream()
                    .map(LanguageDTO::getLanguage)
                    .map(Language::name)
                    .sorted()
                    .toList();
            if (finalQuery.getIsSpecifiedLanguages()) {
                jobAdvertisementList.addAll(findBySpecifiedLanguages(finalQuery.getLanguageDTOs()));

                // Criteria API JPA
                String skillsReduceToOneString = languages.stream()
                        .reduce((a, b) -> a + ";" + b)
                        .orElseThrow();
                predicate = criteriaBuilder.and(predicate, criteriaBuilder.equal(
                        root.get("languages"), skillsReduceToOneString)
                );

//                criteriaQuery.select(root).where(criteriaBuilder.equal(
//                        root.get("languages"), skillsReduceToOneString)
//                );
            } else {
                jobAdvertisementList.addAll(findByLanguages(finalQuery.getLanguageDTOs()));

                // Criteria API JPA
                for (String language : languages) {
                    predicate = criteriaBuilder.and(predicate, criteriaBuilder.like(
                            root.get("languages"), language)
                    );
                }
//                Stream<String> list = languages.stream()
//                        .peek(language -> criteriaQuery.select(root).where(criteriaBuilder.like(
//                                root.get("languages"), language)
//                        ));
            }
        }